<% provide(:title, "Ruby") %>
<h1>Página 2</h1>

<h2>Ruby</h2>

<p>
  Resumen de las siguientes acciones:
  <ul>
    <li>Interpolación de strings<br />
    &emsp;&emsp;La interpolación de strings corresponde a una concatenación, hecha de manera sencilla a través del siguiente código: "#{str_1} #{str2} str_3". Se puede observar que se pueden interpolar variables asignadas a un String, o Strings directamente. </li>
    <li>¿Cómo se declara un array? y ¿cómo se adiciona un elemento al final del array?<br />
    &emsp;&emsp;La declaración de un array se basa en la utilización de los corchetes cuadrados. Por ejemplo: a = [1, 2, 3]. Para adicionar un elemento al final de <i>a</i>, se debe utilizar el método <i>push</i> de la siguiente manera: a.push(5), o en su defecto, el uso del <i>shovel operator</i> (<<). Este último permite agregar más de un elemento a la vez; por ejemplo: a << 5 << 8. Cabe resaltar que en los arrays se puede tener una mezcla de datos de diferentes tipos. </li>
    <li>¿Cómo se itera un array utilizando el comando each?<br />
    &emsp;&emsp;La iteración se realiza a través de un bloque, en el que se llama cada elemento del array, y se realiza cualquier operación con este. Siguiendo con el ejemplo anterior, la siguiente manera es la forma de imprimir cada elemento en consola: a.each {|i| puts i}.</li>
    <li>¿Cómo se declara un hash?<br />
    &emsp;&emsp;Se puede declarar vacío; has = {}, o se puede inicializar usando en primer lugar las claves y sus valores (has = {name: "Seb", email: "seb@user.com"}). Cabe resaltar que los dos puntos (:) pueden ir antes o después.</li>
    <li>¿Cómo se itera un hash utilizando el comando each?<br />
    &emsp;&emsp;La forma es muy parecida a la de los arrays, pero con la diferencia que en esta se deben obtener dos valores; una llave y el valor de la misma. Así, el proceso es: has.each {|i,j| puts "#{i.inspect}, #{j.inspect}"}.</li>
    <li>¿Qué es un block en ruby? Dé un ejemplo de cómo utilizarlo<br />
    &emsp;&emsp;Un <i>block</i> es una manera de agrupar un método con determinado código, que permite actuar sobre los resultados del método. Los ejemplos anteriores del uso de <i>each</i> son claras representaciones de un block en Ruby.</li>
    <li>¿Cuál es la convención en Ruby a la hora de nombrar variables?<br />
    &emsp;&emsp;En Ruby se pueden definir variables a través de un constructor, es decir, en lugar de definir una variable directamente (a = "Hola"), se puede hacer más explícito el proceso de la siguiente manera: a = String.new("Hola"). De esta manera sabemos qué tipo de variable estamos definiendo.</li>
    <li>¿Qué son attr_reader, attr_writer y attr_accesor? ¿Para qué sirven?<br />
    &emsp;&emsp;<i>att_reader</i>, <i>att_writer</i> son métodos que permiten simplificar la manera de hacer de público acceso determinadas variables de una clase en específico. Cuando sólo se quiere acceder a la información se utiliza el primer método, pero cuando se quiere cambiar la información el más indicado es el segundo. Finalmente, <i>att_accesor</i> corresponde a un atajo para el programador, cuando se requiere utilizar tanto la función de <i>att_reader</i> como de <i>att_writer</i>.</li>
  </ul>

</p>